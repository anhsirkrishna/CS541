/////////////////////////////////////////////////////////////////////////
// Compute shader for parallel sum for all the rows of pixels
////////////////////////////////////////////////////////////////////////
#version 430

// Declares thread group size
layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

// Declares a uniform block
uniform blurKernel {
	float weights[101]; 
};

//src image as 4 channel 32bit float readonly
layout (rgba32f) uniform readonly image2D src;
// dst image as 4 channel 32bit float writeonly
layout (rgba32f) uniform writeonly image2D dst;

// Variable shared with other threads in the 128x1 thread group
shared vec4 v[128];

uniform int width;


void main() {

	// Combo of groupID, groupSize and localID
	ivec2 gpos = ivec2(gl_GlobalInvocationID.xy); 
	// Local thread id in the 128x1 thread groups128x1
	uint i = gl_LocalInvocationID.x;
	// read an image pixel at an ivec2(.,.) position
	int offset = 1;
	v[i] = imageLoad(src, gpos);
	v[i+1] = imageLoad(src, ivec2(gpos.x+1, gpos.y));

	for (int d = n>>1; d > 0; d >>= 1)                    // build sum in place up the tree 
{
     __syncthreads(); 
    if (thid < d) { 
        int ai = offset*(2*thid+1)-1;
        int bi = offset*(2*thid+2)-1;  
        temp[bi] += temp[ai];    
    }    
offset *= 2; 
} 
	// Wait for all threads to catchup before reading v[]
	barrier();

	vec4 sum = vec4(0.0f);
	for(unsigned int k=0; k <= 2*width; ++k) {
		sum += v[i+k] * weights[k];
	}

	imageStore(dst, gpos, sum); // Write to destination image
}